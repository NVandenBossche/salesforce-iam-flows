<div class="p-5 mb-4 bg-light text-dark border rounded-3" id="userAgentFlow">
    <div class="card">
        <div class="card-body">
            <h2 class="display-7">User Agent Flow</h2>
            <figure>
                <img
                    class="card-img-bottom"
                    src="https://cloudsundial.com/sites/default/files/2020-05/User%20Agent%203000.png"
                />
                <figcaption>User Agent flow diagram - created by Lawrence Newcombe</figcaption>
            </figure>
        </div>
        <div class="card-body">
            <button
                id="userAgentProduction"
                role="button"
                class="btn btn-primary btn-lg"
                onclick="launchFlow('user-agent', false)"
            >
                Production
            </button>
            <button
                id="userAgentSandbox"
                role="button"
                class="btn btn-primary btn-lg"
                onclick="launchFlow('user-agent', true)"
            >
                Sandbox
            </button>
        </div>
        <div class="card-body">
            <button
                class="btn btn-info text-white"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#userAgentCollapse"
                aria-expanded="false"
                aria-controls="userAgentCollapse"
            >
                Show or Hide Details
            </button>
        </div>
        <div class="collapse card-body" id="userAgentCollapse">
            <ol class="smallFont">
                <li>
                    This section covers the
                    <a
                        href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_user_agent_flow.htm&type=5&sfdcIFrameOrigin=null"
                    >
                        OAuth 2.0 User-Agent flow</a
                    >
                </li>
                <li>
                    Upon clicking the button, the user is redirected with an HTTP GET to the Salesforce Authorization
                    Endpoint (Authorization Server) with the following parameters:
                    <ul>
                        <li>
                            <code>response_type=token</code> OR
                            <code>response_type=token%20id_token</code>
                        </li>
                        <li><code>client_id=<%= clientId %></code> (client ID configured in Connected App)</li>
                        <li>
                            <code>redirect_uri=<%= callbackURL %></code>
                        </li>
                        <li>
                            <code>scope=&lt;Scope parameters&gt;</code> (see
                            <a
                                href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_tokens_scopes.htm&type=5"
                            >
                                OAuth Tokens and Scopes
                            </a>
                            )
                        </li>
                        <li>
                            <code>state=&lt;Unique Identifier&gt;</code>
                        </li>
                        <li>
                            <code>nonce=&lt;High Entropy Code&gt;</code>
                        </li>
                    </ul>
                </li>
                <li>Salesforce requests the user to log in and authorize the Connected App.</li>
                <li>
                    After successful authorization, Salesforce redirects to the callback URL (<%= callbackURL %>) if it
                    matches with the redirect_uri specified in the Connected App. It passes along the Access Token in
                    the URL.
                </li>
                <li>
                    The callback page parses the returned data
                    <ul>
                        <li><code>token_type=Bearer</code></li>
                        <li><code>access_token=&lt;Access Token&gt;</code></li>
                        <li>
                            <code>id_token=&lt;ID Token&gt;</code> (contains information about the user's identity when
                            specified in the response_type)
                        </li>
                        <li><code>refresh_token=&lt;Refresh Token&gt;</code></li>
                        <li><code>instance_url=<%= baseURL %></code></li>
                        <li><code>id=&lt;Identity URL&gt;</code></li>
                        (where you can retrieve additional user data if not present in ID token)
                        <li>
                            <code>signature=&lt;Signature for Open ID&gt;</code> (client_secret key applied to
                            id:issued_at - optional)
                        </li>
                    </ul>
                </li>
                <li>Access token is used to query Salesforce.</li>
                <li>
                    There are a few important scenarios to keep in mind where malicious actors can be involved:
                    <ol>
                        <li>
                            A malicious app tries to access resources they are not allowed to. This is blocked by the
                            scope parameter of the Connected App. For example, even if the user has the permission to
                            post on chatter through its permissions, the malicious app will not be able to post on
                            chatter if the
                            <code>chatter_api</code> scope wasn't enabled for the Connected App.
                        </li>
                        <li>
                            A malicious app tries to send a user-agent request on behalf of the actual app (Cross-Site
                            Request Forging or CSRF). This is blocked by the state parameter where the actual app sends
                            a unique identifier for every user-agent request. Only if the actual app sees the same state
                            being posted on the callback URL endpoint, it will know that the original request was
                            originated from its context.
                        </li>
                        <li>
                            A malicious app tries to replay a response from the authorisation server that contains an
                            (OpenID) ID token to impact user data. The nonce is used to detect such replay attacks, i.e.
                            two responses with the same nonce should only be processed once. More details
                            <a href="https://openid.net/specs/openid-connect-core-1_0.html#ImplicitIDToken"> here </a>.
                        </li>
                        <li>
                            A malicious, but seemingly harmless app is installed on your phone. It comes with an
                            embedded browser inside the app which is used to launch the User-Agent flow. However, the
                            embedded browser actually captures username and password while typing. This is something
                            very difficult to block and requires educating the user to not type credentials in an
                            embedded browser unless you really trust the app. It's better to work with a Web-Server flow
                            without client secret or assertion where a trusted mobile browser is used for launching the
                            auth flow (see lower).
                        </li>
                    </ol>
                </li>
            </ol>
        </div>
    </div>
</div>
